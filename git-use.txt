$ git init 
将在当前目录创建一个隐藏的名为".git"的目录。
----------------------------------------------
$ git init project1
等价于 $ mkdir project1 
       $ cd project1 
       $ git init
----------------------------------------------
$ git status 
检查当前目录是否包含一个git repo
----------------------------------------------
$ ls .git 
查看git目录
----------------------------------------------
$ rm -rf .git/ 
移除有关git的所有东西
----------------------------------------------
$ git add file1 file2
git add 命令是告诉git，我们要把什么文件提交到仓库中去，大家可以看我们执行git add readme.txt命令后，没有任何提示。
那就说明我们提交完成了。下面我们通过git commit命令，将readme.txt文件提交到版本库中。
----------------------------------------------
$ git commit -m "add file1 file2"
我们用git commit命令提交readme.txt文件，给出的提示是 1 file changed, 3 insertions(+)，一个文件改变，插入了三行内容。
git commit命令，其中的参数-m后面输入的是本次提交的版本说明，可以输入任意内容，但需要说明的是，最好写有意义的说明，便于以后查看。
----------------------------------------------
$ git log
查看修改日志
$ git log --pretty=oneline
----------------------------------------------
Undo/Revert/Reset a commit

如果不想让当前的更改生效，返回之前的提交，可以运行如下命令:
# Revert to a previous commit by hash:
$ git -reset --hard <hash>

可使用 HEAD^ 快捷指定上一次提交hash：
# Revert to previous commit:
$ git reset --hard HEAD^
$ git reset --hard HEAD^^
$ git reset --hard HEAD~5
------------------------------------------------
$ git clone git@github.com:junit-team/junit.git
$ git clone https://github.com/junit-team/junit.git
------------------------------------------------
$ git remote add {origin} {git@github.com:yourName/yourRepo.git}
$ git push <remote> <branch>

------------------------------------------------
$ git pull <remote> <branch> # fetches the code and merges it into 
                             # your working directory
$ git fetch <remote> <branch> # fetches the code but does not merge
                              # it into your working directory

$ git pull --tag <remote> <branch> # same as above but fetch tags as well
$ git fetch --tag <remote> <branch> # you get the idea
------------------------------------------------
# create a new branch
$ git branch <branch-name>
# to see a list of all branches in the cureent repoitory 
$ git branch
# if you want to switch to another branch you can use
$ git checkout <branch-name>
# to create a new branch and switch to it in one step
$ git checkout -b <branch-name>
# to delete a branch:
$ git branch -d <branch-name>
# to create a branch with the changes from the current branch,do :
$ git stash
$ git stash branch <branch-name>